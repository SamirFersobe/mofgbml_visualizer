{"version":3,"sources":["components/ScatterPlot.tsx","components/DatasetsDisplay.tsx","components/DropdownOptions.tsx","components/ChartOptions.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScatterPlot","chartData","className","data","options","maintainAspectRatio","aspectRatio","scales","x","display","min","title","text","color","font","family","size","weight","lineHeight","y","DatasetsDisplay","datasets","currentDataset","updateFunction","submit","e","preventDefault","button","currentTarget","value","useEffect","document","getElementById","undefined","innerHTML","datasetItems","map","dataset","Button","onClick","variant","DropdownOptions","buttonName","content","currentVal","Row","md","Col","DropdownButton","id","i","Dropdown","Item","validation_rates","MOP","crossvalidation","objectives","mop1objectives","colors","jsonToData","json","key","hasOwnProperty","parseInt","dataPoint","parseFloat","push","ChartOptions","useState","currentValid","setValid","currentMOP","setMOP","currentObjective","setObjective","currentColor","setColor","Container","oldData","datasetName","validationRate","mop","objective","subrate","Math","round","jsonName","toString","url","a","fetch","response","dataPoints","newData","label","backgroundColor","radius","hoverRadius","borderColor","borderWidth","updatedData","concat","console","log","request","addNewData","datasetData","App","setDataset","setData","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.de709603.chunk.js","sourcesContent":["\r\nimport './ScatterPlot.css';\r\nimport {Scatter} from 'react-chartjs-2'\r\nimport { Coordinate } from 'recharts/types/util/types';\r\n\r\n\r\nexport interface ScatterPlot{\r\n  chartData:data,\r\n}\r\n\r\nexport interface data{\r\n  datasets:dataset[]\r\n}\r\n\r\nexport interface dataset{\r\n  label:String,\r\n  data:Coordinate[],\r\n  backgroundColor: String,\r\n  radius: Number,\r\n  hoverRadius:Number,\r\n  borderColor:String,\r\n  borderWidth:Number,\r\n}\r\n\r\nconst ScatterPlot = ({chartData}:ScatterPlot) => {\r\n    return <div className=\"plot-height\">\r\n\r\n    <Scatter \r\n    data={chartData} \r\n    options ={{\r\n        maintainAspectRatio:false,\r\n        aspectRatio:1,\r\n        scales:{\r\n          x:{\r\n            display:true,\r\n            min:0,\r\n            \r\n            title:{\r\n              display:true,\r\n              text:'Number of Rules',\r\n              color:'#000',\r\n              font:{\r\n                family:'Arial',\r\n                size: 20,\r\n                weight:'bold',\r\n                lineHeight:1.2\r\n              }\r\n            }\r\n\r\n          },\r\n          y:{\r\n            display:true,\r\n            min:0,\r\n            \r\n            title:{\r\n              display:true,\r\n              text:'Error Rate(%)',\r\n              color:'#000',\r\n              font:{\r\n                family:'Arial',\r\n                size:20,\r\n                weight:'bold',\r\n                lineHeight:1.2\r\n              }\r\n            }\r\n\r\n          }\r\n          \r\n        }\r\n    }}\r\n     \r\n    \r\n     />\r\n    </div>\r\n}\r\n\r\nexport default ScatterPlot","import React,{useEffect} from 'react'\r\nimport './DatasetsDisplay.css';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport interface DatasetsDisplay{\r\n    datasets:string[];\r\n    updateFunction:any;\r\n    currentDataset:string;\r\n}\r\n\r\n\r\nfunction DatasetsDisplay({datasets,currentDataset,updateFunction}:DatasetsDisplay) {\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        document.title = currentDataset;\r\n        if(document.getElementById(\"currentDataset\") !== null || document.getElementById(\"currentDataset\") !== undefined){\r\n        document.getElementById(\"currentDataset\")!.innerHTML = currentDataset;\r\n        }\r\n        \r\n        \r\n    })\r\n\r\n    function submit(e:React.MouseEvent<HTMLElement>){\r\n        e.preventDefault();\r\n        if(e.button === 0){\r\n            //@ts-ignore\r\n            updateFunction(e.currentTarget.value)\r\n            \r\n        }\r\n        \r\n    }\r\n    // Defined inside the DatasetsDisplay() to access the local submit function\r\n    const datasetItems = datasets.map((dataset) => <Button   key = {dataset} onClick ={submit} variant=\"info\"  className=\"myButton\" value={dataset}> {dataset}</Button>);\r\n\r\n    return (\r\n        <div className=\"datasetsDisplay\">\r\n            {datasetItems}      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DatasetsDisplay\r\n","import {Row,Col,DropdownButton,Dropdown} from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport interface DropdownOptionsProps{\r\n    buttonName:string;\r\n    content:string[];\r\n    currentVal:string;\r\n    updateFunction(source:string):any;\r\n}\r\n\r\n\r\nfunction DropdownOptions({buttonName,content,currentVal,updateFunction}:DropdownOptionsProps) {\r\n\r\n    return (\r\n        <Row md={2}>\r\n        <Col>\r\n        <p className=\"dropdown-button\"> {buttonName} </p>\r\n        </Col>\r\n        <Col>\r\n        <DropdownButton className=\"dropdown-button\" id=\"dropdown-basic-button\" title={currentVal}>\r\n            {content.map((i) =>(\r\n            <Dropdown.Item  key={i} onClick={()=>updateFunction(i)} value={i}>{i}</Dropdown.Item>))}\r\n        </DropdownButton>\r\n        </Col>\r\n        \r\n    </Row>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default DropdownOptions\r\n\r\n","import {Button,Row,Container} from \"react-bootstrap\"\r\nimport './ChartOptions.css';\r\nimport DropdownOptions from \"./DropdownOptions\";\r\nimport { useState} from \"react\";\r\nimport { Coordinate } from 'recharts/types/util/types';\r\n\r\n//Values for the Dropdown Buttons\r\n\r\nconst validation_rates =['0.9','0.8','0.7','0.5','0.3','0.2','0.1']\r\nconst  MOP = ['MOP1','MOP7']\r\nconst crossvalidation = ['SCV','DOBSCV']\r\nconst objectives = ['Dtra','Dtst','Dvalid','Dsubtra']\r\nconst mop1objectives = ['Dtra','Dtst']\r\nconst colors = ['green','yellow','blue','red','purple','orange','aqua','black']\r\n\r\nfunction jsonToData(json:JSON){\r\n    const data:Coordinate[] = [];\r\n    for(let key  in json){\r\n      if (json.hasOwnProperty(key)){        \r\n        if(parseInt(key)>= 2){\r\n          //@ts-ignore\r\n        let dataPoint:Coordinate = {x:parseInt(key),y:parseFloat(json[key])};\r\n        data.push(dataPoint);\r\n        }\r\n      };\r\n    }\r\n  \r\n    return data\r\n  }\r\n\r\n//preset to showcase somedata constantly TODO: Obtain a lot of data async \r\nfunction preset(dataset:string){\r\n\r\n}\r\n//update function is the useState hook that is passed down from App.tsx and is used as a callback function\r\nfunction addNewData(oldData:data,datasetName:string,validationRate:string,mop:string,objective:string,color:string,updateFunction:any){\r\n    let subrate = 10-Math.round(parseFloat(validationRate)*10)\r\n    let jsonName:string = `${datasetName}_gen5000_${mop}at${subrate.toString(10)}_${objective}`\r\n    let url:string = `https://mofgbml-visualizer.herokuapp.com/api/${jsonName}`\r\n   \r\n    //function of request\r\n    const request = async()=>{ //async function so that we can return the data after it's loaded\r\n      const response = await fetch(url) // response from server after fetching\r\n      const dataPoints = await response.json() // turning it into json data\r\n      try{\r\n        let newData ={\r\n          datasets:[\r\n          {\r\n              label:`${objective} at ${validationRate} for ${mop}`,\r\n              data:jsonToData(dataPoints),\r\n              backgroundColor:color,\r\n              radius:10,\r\n              hoverRadius:10,\r\n              borderColor:'black',\r\n              borderWidth:2,\r\n              },\r\n          ]\r\n      }\r\n      //empty object to put both olddata and newdata\r\n      let updatedData:data ={\r\n          datasets:[]\r\n      };\r\n      \r\n      updatedData.datasets = oldData.datasets.concat(newData.datasets) \r\n      updateFunction(updatedData); //using the callback updatefunction when we finally obtain the data\r\n  \r\n      }catch(e){\r\n          console.log(e)\r\n          updateFunction(oldData);\r\n      }\r\n      \r\n    };\r\n    \r\n    request();\r\n  }\r\n\r\nfunction clearData(){\r\n    let newData:data ={\r\n        datasets:[\r\n          \r\n        ]\r\n    };\r\n    return newData;\r\n}\r\n\r\nexport interface ChartOptions{\r\n    updateFunction:any,\r\n    chartData:data,\r\n    currentDataset:string,\r\n}\r\n\r\nexport interface data{\r\n    datasets:dataset[]\r\n}\r\n\r\nexport interface dataset{\r\n    label:String,\r\n    data:Coordinate[],\r\n    backgroundColor: String,\r\n    radius: Number,\r\n    hoverRadius:Number,\r\n    borderColor:String,\r\n    borderWidth:Number,\r\n  }\r\n\r\n\r\nexport default function ChartOptions({currentDataset,updateFunction,chartData}:ChartOptions) {\r\n    const [currentValid,setValid] = useState(validation_rates[0]);\r\n    const [currentMOP,setMOP] = useState(MOP[0]);\r\n    const [currentCV,setCV] =useState(crossvalidation[0]);\r\n    const [currentObjective,setObjective] = useState(objectives[0]);\r\n    const [currentColor,setColor] = useState('white')\r\n    \r\n    return (\r\n\r\n            <div className=\"dropdowns\">\r\n            <Container>\r\n            <h2 id=\"currentDataset\">CurrentDataset</h2>\r\n            <DropdownOptions buttonName = {\"MOP\"} content={MOP} currentVal={currentMOP} updateFunction = {setMOP} />\r\n           {\r\n             currentMOP !=='MOP1' && <DropdownOptions buttonName = {\"Validation Rate\"} content={validation_rates} currentVal = {currentValid} updateFunction = {setValid} /> \r\n           }\r\n \r\n            <DropdownOptions buttonName = {\"Objective\"} content={currentMOP ==='MOP1'?mop1objectives:objectives} currentVal = {currentObjective} updateFunction = {setObjective} />\r\n            <DropdownOptions buttonName = {\"Color\"} content ={colors} currentVal = {currentColor} updateFunction = {setColor}></DropdownOptions>\r\n            <Row>\r\n            <Button onClick={()=>addNewData(chartData,currentDataset,currentMOP === 'MOP1'?'0.5':currentValid,currentMOP,currentObjective,currentColor,updateFunction)} className=\"dropdown-button\" variant=\"primary\"> Add New</Button>   \r\n            \r\n            </Row> \r\n            <Row>\r\n            <Button onClick={()=>updateFunction(clearData())}className=\"dropdown-button\" variant=\"danger\">Clear All </Button>   \r\n            </Row>\r\n            </Container>\r\n            \r\n            \r\n            </div>\r\n        \r\n    )\r\n}\r\n","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ScatterPlot from './components/ScatterPlot';\nimport DatasetsDisplay from './components/DatasetsDisplay';\nimport ChartOptions from './components/ChartOptions';\nimport {useState} from 'react';\nimport { Coordinate } from 'recharts/types/util/types';\nimport './App.css';\nimport { Container,Row,Col} from 'react-bootstrap';\n\nconst datasetData:string[] =[\"australian\",\"iris\",\"magic\",\"newthyroid\",\"page-blocks\",\"penbased\",\"phoneme\",\"pima\",\"sonar\",\"vehicle\",\"wine\"];\n\n\nfunction App() {\n\n\n\n  const initialData = {\n    datasets: [],\n      \n  };\n\n  const [currentDataset,setDataset] = useState(datasetData[0])\n  const [chartData,setData] = useState(initialData)\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n      <Col xl=\"5\">\n      <h1 className=\"app\"> Charts for MoFGBML</h1>\n      </Col>\n      </Row>\n      <DatasetsDisplay datasets={datasetData} currentDataset ={currentDataset} updateFunction={setDataset} />\n      <Container>\n       \n        <Row className=\"justify-content-center\">\n        <Col md={8}>\n          \n          <ScatterPlot \n          chartData={chartData} \n          />\n\n        </Col>\n        <Col md={4}>\n          <ChartOptions updateFunction={setData} chartData ={chartData} currentDataset={currentDataset} />\n        </Col>\n        </Row>\n      </Container>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}