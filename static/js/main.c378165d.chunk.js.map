{"version":3,"sources":["components/ScatterPlot.tsx","components/DropdownOptions.tsx","components/ChartOptions.tsx","components/DatasetsDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScatterPlot","chartData","className","data","options","maintainAspectRatio","aspectRatio","scales","x","display","min","title","text","color","font","family","size","weight","lineHeight","y","DropdownOptions","buttonName","content","currentVal","updateFunction","Row","md","Col","DropdownButton","id","map","i","Dropdown","Item","onClick","value","validation_rates","MOP","objectives","mop1objectives","colors","jsonToData","json","key","hasOwnProperty","parseInt","dataPoint","parseFloat","push","compareDtra","dataset","objective","urls","titles","a","fetch","response1","response2","dataPoints1","dataPoints2","newData","datasets","label","backgroundColor","radius","hoverRadius","borderColor","borderWidth","e","console","log","request","clearData","ChartOptions","currentDataset","useState","currentValid","setValid","currentMOP","setMOP","currentObjective","setObjective","currentColor","setColor","Container","Button","oldData","datasetName","validationRate","mop","subrate","Math","round","jsonName","toString","url","response","dataPoints","updatedData","concat","addNewData","variant","type","compareToMop1","DatasetsDisplay","updateCurrentDataset","updateChart","submit","preventDefault","button","currentTarget","useEffect","document","getElementById","undefined","innerHTML","preset","datasetItems","datasetData","App","setDataset","setData","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c378165d.chunk.js","sourcesContent":["\r\nimport './ScatterPlot.css';\r\nimport {Scatter} from 'react-chartjs-2'\r\nimport { Coordinate } from 'recharts/types/util/types';\r\n\r\n\r\nexport interface ScatterPlot{\r\n  chartData:data,\r\n}\r\n\r\nexport interface data{\r\n  datasets:dataset[]\r\n}\r\n\r\nexport interface dataset{\r\n  label:String,\r\n  data:Coordinate[],\r\n  backgroundColor: String,\r\n  radius: Number,\r\n  hoverRadius:Number,\r\n  borderColor:String,\r\n  borderWidth:Number,\r\n}\r\n\r\nconst ScatterPlot = ({chartData}:ScatterPlot) => {\r\n    return <div className=\"plot-height\">\r\n\r\n    <Scatter \r\n    data={chartData} \r\n    options ={{\r\n        maintainAspectRatio:false,\r\n        aspectRatio:1,\r\n        scales:{\r\n          x:{\r\n            display:true,\r\n            min:0,\r\n            \r\n            title:{\r\n              display:true,\r\n              text:'Number of Rules',\r\n              color:'#000',\r\n              font:{\r\n                family:'Arial',\r\n                size: 20,\r\n                weight:'bold',\r\n                lineHeight:1.2\r\n              }\r\n            }\r\n\r\n          },\r\n          y:{\r\n            display:true,\r\n            \r\n            \r\n            title:{\r\n              display:true,\r\n              text:'Error Rate(%)',\r\n              color:'#000',\r\n              font:{\r\n                family:'Arial',\r\n                size:20,\r\n                weight:'bold',\r\n                lineHeight:1.2\r\n              }\r\n            }\r\n\r\n          }\r\n          \r\n        }\r\n    }}\r\n     \r\n    \r\n     />\r\n    </div>\r\n}\r\n\r\nexport default ScatterPlot","import {Row,Col,DropdownButton,Dropdown} from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport interface DropdownOptionsProps{\r\n    buttonName:string;\r\n    content:string[];\r\n    currentVal:string;\r\n    updateFunction(source:string):any;\r\n}\r\n\r\n\r\nfunction DropdownOptions({buttonName,content,currentVal,updateFunction}:DropdownOptionsProps) {\r\n\r\n    return (\r\n        <Row md={2}>\r\n        <Col>\r\n        <p className=\"dropdown-button\"> {buttonName} </p>\r\n        </Col>\r\n        <Col>\r\n        <DropdownButton className=\"dropdown-button\" id=\"dropdown-basic-button\" title={currentVal}>\r\n            {content.map((i) =>(\r\n            <Dropdown.Item  key={i} onClick={()=>updateFunction(i)} value={i}>{i}</Dropdown.Item>))}\r\n        </DropdownButton>\r\n        </Col>\r\n        \r\n    </Row>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default DropdownOptions\r\n\r\n","import {Button,Row,Container,Col} from \"react-bootstrap\"\r\nimport './ChartOptions.css';\r\nimport DropdownOptions from \"./DropdownOptions\";\r\nimport { useEffect, useState} from \"react\";\r\nimport { Coordinate } from 'recharts/types/util/types';\r\n\r\n//Values for the Dropdown Buttons\r\nconst validation_rates =['0.9','0.8','0.7','0.5','0.3','0.2','0.1']\r\nconst  MOP = ['MOP1','MOP7']\r\nconst crossvalidation = ['SCV','DOBSCV']\r\nconst objectives = ['Dtra','Dtst','Dvalid','Dsubtra']\r\nconst mop1objectives = ['Dtra','Dtst']\r\nconst colors = ['green','yellow','blue','red','purple','orange','aqua','black']\r\n\r\n\r\nexport interface ChartOptions{\r\n  updateFunction:any,\r\n  chartData:data,\r\n  currentDataset:string,\r\n}\r\n\r\nexport interface data{\r\n  datasets:dataset[]\r\n}\r\n\r\nexport interface dataset{\r\n  label:String,\r\n  data:Coordinate[],\r\n  backgroundColor: String,\r\n  radius: Number,\r\n  hoverRadius:Number,\r\n  borderColor:String,\r\n  borderWidth:Number,\r\n}\r\nfunction jsonToData(json:JSON){\r\n    const data:Coordinate[] = [];\r\n    for(let key  in json){\r\n      if (json.hasOwnProperty(key)){        \r\n        if(parseInt(key)>= 2){\r\n          //@ts-ignore\r\n        let dataPoint:Coordinate = {x:parseInt(key),y:parseFloat(json[key])};\r\n        data.push(dataPoint);\r\n        }\r\n      };\r\n    }\r\n  \r\n    return data\r\n  }\r\n\r\nfunction compareToMop1(oldData:data,dataset:string,updateFunction:any){\r\n\r\n\r\n  let urls = [`https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP1at5_Dtra`,\r\n              `https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP1at5_Dtst`]\r\n  let titles = [`${dataset} MOP1 Training Data`,`${dataset} MOP1 Test Data`];\r\n  \r\n\r\n  const request  =  async()=>{\r\n    const response1 =  await fetch(urls[0])\r\n    const response2 =  await fetch(urls[1])\r\n    const dataPoints1 = await response1.json()\r\n    const dataPoints2 = await response2.json()\r\n    \r\n    try{\r\n      let newData = {\r\n        datasets:[\r\n          {\r\n            type:'line',\r\n            label: titles[0],\r\n            data:jsonToData(dataPoints1),\r\n            borderColor:'blue',\r\n            \r\n            },\r\n          {\r\n            type:'line',\r\n            label:titles[1],\r\n            data:jsonToData(dataPoints2),\r\n            borderColor:'red'\r\n \r\n            },\r\n        ]\r\n      }\r\n  \r\n  //empty object to put both olddata and newdata\r\n     let updatedData:data ={\r\n      datasets:[]\r\n  };\r\n  //@ts-ignore\r\n  updatedData.datasets = oldData.datasets.concat(newData.datasets) \r\n  updateFunction(updatedData); //using the callback updatefunction when we finally obtain the data\r\n\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n  };\r\n  request();\r\n}\r\n\r\n\r\nfunction compareDtra(dataset:string,updateFunction:any,objective:string){\r\n  let urls = [\"\",\"\"];\r\n  let titles = [\"\",\"\"]\r\n  if(objective === 'Dtra'){\r\n     urls = [`https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP1at5_Dtra`,\r\n              `https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP7at5_Dtra`]\r\n     titles = [`${dataset} MOP1 Training Data`,`${dataset} MOP7 Training Data`];\r\n  }\r\n  else{\r\n    urls = [`https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP1at5_Dtst`,\r\n              `https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP7at5_Dtst`]\r\n    titles = [`${dataset} MOP1 Test Data`,`${dataset} MOP7 Test Data`]\r\n  }\r\n  const request  =  async()=>{\r\n    const response1 =  await fetch(urls[0])\r\n    const response2 =  await fetch(urls[1])\r\n    const dataPoints1 = await response1.json()\r\n    const dataPoints2 = await response2.json()\r\n    \r\n    try{\r\n      let newData = {\r\n        datasets:[\r\n          {\r\n            label: titles[0],\r\n            data:jsonToData(dataPoints1),\r\n            backgroundColor:'blue',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n          {\r\n            label:titles[1],\r\n            data:jsonToData(dataPoints2),\r\n            backgroundColor:'green',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n        ]\r\n      }\r\n  \r\n    updateFunction(newData); //using the callback updatefunction when we finally obtain the data\r\n\r\n\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n  };\r\n  request();\r\n}\r\n\r\n//preset to showcase somedata constantly TODO: Obtain a lot of data async \r\nexport function preset(dataset:string,updateFunction:any){\r\n  let urls = [`https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP1at5_Dtra`,\r\n              `https://mofgbml-visualizer.herokuapp.com/api/${dataset}_gen5000_MOP1at5_Dtst`]\r\n  \r\n  const request  =  async()=>{\r\n    const response1 =  await fetch(urls[0])\r\n    const response2 =  await fetch(urls[1])\r\n    const dataPoints1 = await response1.json()\r\n    const dataPoints2 = await response2.json()\r\n    \r\n    try{\r\n      let newData = {\r\n        datasets:[\r\n          {\r\n            label:`${dataset}Training Data MOP1`,\r\n            data:jsonToData(dataPoints1),\r\n            backgroundColor:'blue',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n          {\r\n            label:`${dataset} Test Data MOP1`,\r\n            data:jsonToData(dataPoints2),\r\n            backgroundColor:'red',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n        ]\r\n      }\r\n  \r\n    updateFunction(newData); //using the callback updatefunction when we finally obtain the data\r\n\r\n\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n  };\r\n  request();\r\n\r\n}\r\n//update function is the useState hook that is passed down from App.tsx and is used as a callback function\r\nfunction addNewData(oldData:data,datasetName:string,validationRate:string,mop:string,objective:string,color:string,updateFunction:any){\r\n    let subrate = 10-Math.round(parseFloat(validationRate)*10)\r\n    let jsonName:string = `${datasetName}_gen5000_${mop}at${subrate.toString(10)}_${objective}`\r\n    let url:string = `https://mofgbml-visualizer.herokuapp.com/api/${jsonName}`\r\n   \r\n    //function of request\r\n    const request = async()=>{ //async function so that we can return the data after it's loaded\r\n      const response = await fetch(url) // response from server after fetching\r\n      const dataPoints = await response.json() // turning it into json data\r\n      try{\r\n        let newData ={\r\n          datasets:[\r\n          {\r\n              label:`${datasetName} ${objective} at ${validationRate} for ${mop}`,\r\n              data:jsonToData(dataPoints),\r\n              backgroundColor:color,\r\n              radius:10,\r\n              hoverRadius:10,\r\n              borderColor:'black',\r\n              borderWidth:2,\r\n              },\r\n          ]\r\n      }\r\n      //empty object to put both olddata and newdata\r\n      let updatedData:data ={\r\n          datasets:[]\r\n      };\r\n      \r\n      updatedData.datasets = oldData.datasets.concat(newData.datasets) \r\n      updateFunction(updatedData); //using the callback updatefunction when we finally obtain the data\r\n  \r\n      }catch(e){\r\n          console.log(e)\r\n          updateFunction(oldData);\r\n      }\r\n      \r\n    };\r\n    \r\n    request();\r\n  }\r\n\r\n// creates an empty data object and updates chartData with it\r\nexport function clearData(updateFunction:any){\r\n    let newData:data ={\r\n        datasets:[\r\n          \r\n        ]\r\n    };\r\n    updateFunction(newData);\r\n}\r\n\r\n\r\n\r\nexport default function ChartOptions({currentDataset,updateFunction,chartData}:ChartOptions) {\r\n    const [currentValid,setValid] = useState(validation_rates[0]);\r\n    const [currentMOP,setMOP] = useState(MOP[0]);\r\n    // const [currentCV,setCV] =useState(crossvalidation[0]);\r\n    const [currentObjective,setObjective] = useState(objectives[0]);\r\n    const [currentColor,setColor] = useState('white')\r\n    \r\n    // useEffect(()=>{\r\n    //   // Checking for changes in current dataset values\r\n    //   preset(currentDataset,updateFunction);\r\n    // } ,[currentDataset] \r\n    // );\r\n    return (\r\n    <div className=\"dropdowns\">\r\n      <Container>\r\n        <h2 id=\"currentDataset\">CurrentDataset</h2>\r\n        <DropdownOptions buttonName = {\"MOP\"} content={MOP} currentVal={currentMOP} updateFunction = {setMOP} />\r\n        {\r\n          currentMOP !=='MOP1' && <DropdownOptions buttonName = {\"Validation Rate\"} content={validation_rates} currentVal = {currentValid} updateFunction = {setValid} /> \r\n        }\r\n \r\n        <DropdownOptions buttonName = {\"Objective\"} content={currentMOP ==='MOP1'?mop1objectives:objectives} currentVal = {currentObjective} updateFunction = {setObjective} />\r\n\r\n        <DropdownOptions buttonName = {\"Color\"} content ={colors} currentVal = {currentColor} updateFunction = {setColor}></DropdownOptions>\r\n\r\n            \r\n        <Row>\r\n          <Button onClick={()=>addNewData(chartData,currentDataset,currentMOP === 'MOP1'?'0.5':currentValid,currentMOP,currentObjective,currentColor,updateFunction)} className=\"dropdown-button\" variant=\"primary\"> Add New</Button>   \r\n        </Row> \r\n\r\n        <Row>\r\n\r\n          <Col md={6} >\r\n          <Button onClick={()=>compareDtra(currentDataset,updateFunction,\"Dtra\")} className=\"dropdown-button\" variant=\"secondary\" >Display Training Data</Button>   \r\n          </Col>\r\n\r\n          <Col md={6}>\r\n          <Button onClick={()=>compareDtra(currentDataset,updateFunction,\"Dtst\")} className=\"dropdown-button\" variant=\"secondary\" >Display Test Data</Button>   \r\n          </Col>\r\n        </Row> \r\n        <Row>\r\n          <Button onClick={()=>compareToMop1(chartData,currentDataset,updateFunction)} className=\"dropdown-button\" variant=\"secondary\"> Compare to MOP1</Button>   \r\n        </Row>\r\n        <Row>\r\n          <Button onClick={()=>clearData(updateFunction)}className=\"dropdown-button\" variant=\"danger\">Clear All </Button>   \r\n        </Row>\r\n      </Container>\r\n            \r\n            \r\n    </div>\r\n        \r\n    )\r\n}\r\n","import React,{useEffect} from 'react'\r\nimport './DatasetsDisplay.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport { preset,clearData } from './ChartOptions';\r\nexport interface DatasetsDisplay{\r\n    datasets:string[];\r\n    updateCurrentDataset:any;\r\n    currentDataset:string;\r\n    updateChart:any;\r\n}\r\n\r\n\r\nfunction DatasetsDisplay({datasets,currentDataset,updateCurrentDataset,updateChart}:DatasetsDisplay) {\r\n    \r\n    useEffect(() => {\r\n        document.title = currentDataset;\r\n        if(document.getElementById(\"currentDataset\") !== null || document.getElementById(\"currentDataset\") !== undefined){\r\n            document.getElementById(\"currentDataset\")!.innerHTML = currentDataset;\r\n            console.log(\"UseEffect change title to:\")\r\n        }\r\n        console.log(currentDataset)\r\n        preset(currentDataset,updateChart)\r\n        return ()=>{\r\n            console.log(\"cleanup\");\r\n            clearData(updateChart);\r\n        };\r\n        \r\n    },[currentDataset])\r\n\r\n\r\n\r\n\r\n    function submit(e:React.MouseEvent<HTMLElement>){\r\n        e.preventDefault();\r\n        if(e.button === 0){\r\n            //@ts-ignore\r\n            updateCurrentDataset(e.currentTarget.value);\r\n            \r\n            console.log(\"Submit Function\")\r\n            \r\n        }\r\n        \r\n    }\r\n    // Defined inside the DatasetsDisplay() to access the local submit function\r\n    const datasetItems = datasets.map((dataset) => <Button   key = {dataset} onClick ={submit} variant=\"info\"  className=\"myButton\" value={dataset}> {dataset}</Button>);\r\n\r\n    return (\r\n        <div className=\"datasetsDisplay\">\r\n            {datasetItems}      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DatasetsDisplay\r\n","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ScatterPlot from './components/ScatterPlot';\nimport DatasetsDisplay from './components/DatasetsDisplay';\nimport ChartOptions from './components/ChartOptions';\nimport {useState} from 'react';\nimport './App.css';\nimport { Container,Row,Col} from 'react-bootstrap';\nimport { useEffect } from 'react';\n\nconst datasetData:string[] =[\"australian\",\"iris\",\"magic\",\"newthyroid\",\"page-blocks\",\"penbased\",\"phoneme\",\"pima\",\"sonar\",\"vehicle\",\"wine\"];\n\n\nfunction App() {\n\n  const initialData = {\n    datasets: [],\n      \n  };\n\n  const [currentDataset,setDataset] = useState(datasetData[0])\n  const [chartData,setData] = useState(initialData)\n\n  useEffect(()=>{\n    console.log(\"rendering again\")\n  },[chartData])\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n      <Col xl=\"5\">\n      <h1 className=\"app\"> Charts for MoFGBML</h1>\n      </Col>\n      </Row>\n      <DatasetsDisplay datasets={datasetData} currentDataset ={currentDataset} updateCurrentDataset={setDataset} updateChart ={setData} />\n      <Container>\n       \n        <Row className=\"justify-content-center\">\n        <Col md={8}>\n          \n          <ScatterPlot \n          chartData={chartData} \n          />\n\n        </Col>\n        <Col md={4}>\n          <ChartOptions updateFunction={setData} chartData ={chartData} currentDataset={currentDataset} />\n        </Col>\n        </Row>\n      </Container>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}