{"version":3,"sources":["components/ScatterPlot.tsx","components/DatasetsDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rand_x","Math","round","random","rand_y","data","datasets","label","x","y","backgroundColor","ScatterPlot","className","options","maintainAspectRatio","height","width","datasetItems","map","dataset","DatasetsDisplay","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAIMA,EAAS,kBAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,WAC/BC,EAAS,kBAAMH,KAAKC,MAAqB,GAAfD,KAAKE,WAC/BE,EAAO,CACTC,SAAU,CACR,CACEC,MAAO,YACPF,KAAM,CACJ,CAAEG,EAAGR,IAAUS,EAAGL,KAClB,CAAEI,EAAGR,IAAUS,EAAGL,KAClB,CAAEI,EAAGR,IAAUS,EAAGL,KAClB,CAAEI,EAAGR,IAAUS,EAAGL,KAClB,CAAEI,EAAGR,IAAUS,EAAGL,MAGpBM,gBAAiB,yBAqBVC,EAdK,WAChB,OAAO,qBAAKC,UAAU,YAAf,SAEP,cAAC,IAAD,CACAP,KAAMA,EACNQ,QAAU,CACNC,qBAAoB,GAExBC,OAAQ,IACRC,MAAO,SC9BLC,G,OADmB,CAAC,OAAO,OAAO,UAAU,aAAa,OAAO,aAAa,YACrDC,KAAI,SAACC,GAAD,OAAa,yBAAQP,UAAU,WAAlB,cAA+BO,SAS/DC,MARf,WACI,OACI,qBAAKR,UAAU,kBAAf,SACKK,K,OCWEI,MAZf,WACE,OACE,gCACE,qDACA,gCACA,cAAC,EAAD,IACA,cAAC,EAAD,WCCSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f2a13bd7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ScatterPlot.css';\r\nimport {Scatter} from 'react-chartjs-2'\r\n\r\nconst rand_x = () => Math.round(Math.random() * 60 );\r\nconst rand_y = () => Math.round(Math.random()* 20);\r\nconst data = {\r\n    datasets: [\r\n      {\r\n        label: 'A dataset',\r\n        data: [\r\n          { x: rand_x(), y: rand_y() },\r\n          { x: rand_x(), y: rand_y() },\r\n          { x: rand_x(), y: rand_y() },\r\n          { x: rand_x(), y: rand_y() },\r\n          { x: rand_x(), y: rand_y() },\r\n\r\n        ],\r\n        backgroundColor: 'rgba(0, 99, 132, 1)',\r\n      },\r\n    ],\r\n  };\r\n  \r\n\r\n\r\nconst ScatterPlot = () => {\r\n    return <div className=\"container\" >\r\n\r\n    <Scatter \r\n    data={data} \r\n    options ={{\r\n        maintainAspectRatio:false,\r\n    }}\r\n    height={200}\r\n    width={200}\r\n     />\r\n    </div>\r\n}\r\n\r\nexport default ScatterPlot","import React from 'react'\r\nimport './DatasetsDisplay.css';\r\n\r\nconst datasets:string[] =['iris','pima','vehicle','australian','wine','newthyroid','satimage'];\r\nconst datasetItems = datasets.map((dataset) => <button className=\"myButton\"> {dataset}</button>)\r\nfunction DatasetsDisplay() {\r\n    return (\r\n        <div className=\"datasetsDisplay\">\r\n            {datasetItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DatasetsDisplay\r\n","import React from 'react';\n\nimport ScatterPlot from './components/ScatterPlot';\nimport DatasetsDisplay from './components/DatasetsDisplay';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <h1> Charts for MoFGBML</h1>\n      <div>\n      <DatasetsDisplay />\n      <ScatterPlot />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}