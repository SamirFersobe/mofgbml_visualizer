{"version":3,"sources":["components/ScatterPlot.tsx","components/DropdownOptions.tsx","components/ChartOptions.tsx","components/DatasetsDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScatterPlot","_ref","chartData","_jsx","className","children","Scatter","data","options","maintainAspectRatio","aspectRatio","scales","x","display","min","title","text","color","font","family","size","weight","lineHeight","y","DropdownOptions","buttonName","content","currentVal","updateFunction","_jsxs","Row","md","Col","DropdownButton","id","map","i","Dropdown","Item","onClick","value","validation_rates","MOP","objectives","mop1objectives","colors","domain","jsonToData","json","key","hasOwnProperty","parseInt","dataPoint","parseFloat","push","compareDtra","dataset","objective","urls","titles","concat","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","response1","response2","dataPoints1","dataPoints2","newData","wrap","_context2","prev","next","fetch","sent","datasets","label","backgroundColor","radius","hoverRadius","borderColor","borderWidth","e","console","log","stop","apply","arguments","request","clearData","ChartOptions","_ref5","currentDataset","_useState","useState","_useState2","_slicedToArray","currentValid","setValid","_useState3","_useState4","currentMOP","setMOP","_useState5","_useState6","currentObjective","setObjective","_useState7","_useState8","currentColor","setColor","Container","Button","oldData","datasetName","validationRate","mop","subrate","Math","round","jsonName","toString","url","_ref4","_callee4","response","dataPoints","updatedData","_context4","addNewData","variant","_callee","_context","type","compareToMop1","DatasetsDisplay","updateCurrentDataset","updateChart","submit","preventDefault","button","currentTarget","useEffect","document","getElementById","undefined","innerHTML","_ref3","_callee3","_context3","preset","datasetItems","datasetData","App","setDataset","setData","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.32096b4f.chunk.js","sourcesContent":["\r\nimport './ScatterPlot.css';\r\nimport {Scatter} from 'react-chartjs-2'\r\nimport { Coordinate } from 'recharts/types/util/types';\r\n\r\n\r\nexport interface ScatterPlot{\r\n  chartData:data,\r\n}\r\n\r\nexport interface data{\r\n  datasets:dataset[]\r\n}\r\n\r\nexport interface dataset{\r\n  label:String,\r\n  data:Coordinate[],\r\n  backgroundColor: String,\r\n  radius: Number,\r\n  hoverRadius:Number,\r\n  borderColor:String,\r\n  borderWidth:Number,\r\n}\r\n\r\nconst ScatterPlot = ({chartData}:ScatterPlot) => {\r\n    return <div className=\"plot-height\">\r\n\r\n    <Scatter \r\n    data={chartData} \r\n    options ={{\r\n        maintainAspectRatio:false,\r\n        aspectRatio:1,\r\n        scales:{\r\n          x:{\r\n            display:true,\r\n            min:0,\r\n            \r\n            title:{\r\n              display:true,\r\n              text:'Number of Rules',\r\n              color:'#000',\r\n              font:{\r\n                family:'Arial',\r\n                size: 20,\r\n                weight:'bold',\r\n                lineHeight:1.2\r\n              }\r\n            }\r\n\r\n          },\r\n          y:{\r\n            display:true,\r\n            \r\n            \r\n            title:{\r\n              display:true,\r\n              text:'Error Rate(%)',\r\n              color:'#000',\r\n              font:{\r\n                family:'Arial',\r\n                size:20,\r\n                weight:'bold',\r\n                lineHeight:1.2\r\n              }\r\n            }\r\n\r\n          }\r\n          \r\n        }\r\n    }}\r\n     \r\n    \r\n     />\r\n    </div>\r\n}\r\n\r\nexport default ScatterPlot","import {Row,Col,DropdownButton,Dropdown} from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport interface DropdownOptionsProps{\r\n    buttonName:string;\r\n    content:string[];\r\n    currentVal:string;\r\n    updateFunction(source:string):any;\r\n}\r\n\r\n\r\nfunction DropdownOptions({buttonName,content,currentVal,updateFunction}:DropdownOptionsProps) {\r\n\r\n    return (\r\n        <Row md={2}>\r\n        <Col>\r\n        <p className=\"dropdown-button\"> {buttonName} </p>\r\n        </Col>\r\n        <Col>\r\n        <DropdownButton className=\"dropdown-button\" id=\"dropdown-basic-button\" title={currentVal}>\r\n            {content.map((i) =>(\r\n            <Dropdown.Item  key={i} onClick={()=>updateFunction(i)} value={i}>{i}</Dropdown.Item>))}\r\n        </DropdownButton>\r\n        </Col>\r\n        \r\n    </Row>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default DropdownOptions\r\n\r\n","import {Button,Row,Container,Col} from \"react-bootstrap\"\r\nimport './ChartOptions.css';\r\nimport DropdownOptions from \"./DropdownOptions\";\r\nimport { useEffect, useState} from \"react\";\r\nimport { Coordinate } from 'recharts/types/util/types';\r\n\r\n//Values for the Dropdown Buttons\r\nconst validation_rates =['0.9','0.8','0.7','0.5','0.3','0.2','0.1']\r\nconst  MOP = ['MOP1','MOP7']\r\nconst crossvalidation = ['SCV','DOBSCV']\r\nconst objectives = ['Dtra','Dtst','Dvalid','Dsubtra']\r\nconst mop1objectives = ['Dtra','Dtst']\r\nconst colors = ['green','yellow','blue','red','purple','orange','aqua','black']\r\n// current domain where we hold the data\r\nconst domain = \"http://data.samirfersobe.com/\"\r\nexport interface ChartOptions{\r\n  updateFunction:any,\r\n  chartData:data,\r\n  currentDataset:string,\r\n}\r\n\r\nexport interface data{\r\n  datasets:dataset[]\r\n}\r\n\r\nexport interface dataset{\r\n  label:String,\r\n  data:Coordinate[],\r\n  backgroundColor: String,\r\n  radius: Number,\r\n  hoverRadius:Number,\r\n  borderColor:String,\r\n  borderWidth:Number,\r\n}\r\nfunction jsonToData(json:JSON){\r\n    const data:Coordinate[] = [];\r\n    for(let key  in json){\r\n      if (json.hasOwnProperty(key)){        \r\n        if(parseInt(key)>= 2){\r\n          //@ts-ignore\r\n        let dataPoint:Coordinate = {x:parseInt(key),y:parseFloat(json[key])};\r\n        data.push(dataPoint);\r\n        }\r\n      };\r\n    }\r\n  \r\n    return data\r\n  }\r\n\r\nfunction compareToMop1(oldData:data,dataset:string,updateFunction:any){\r\n\r\n\r\n  let urls = [`${domain}${dataset}_gen5000_MOP1at5_Dtra.json`,\r\n              `${domain}${dataset}_gen5000_MOP1at5_Dtst.json`]\r\n  let titles = [`${dataset} MOP1 Training Data`,`${dataset} MOP1 Test Data`];\r\n  \r\n\r\n  const request  =  async()=>{\r\n    const response1 =  await fetch(urls[0])\r\n    const response2 =  await fetch(urls[1])\r\n    const dataPoints1 = await response1.json()\r\n    const dataPoints2 = await response2.json()\r\n    \r\n    try{\r\n      let newData = {\r\n        datasets:[\r\n          {\r\n            type:'line',\r\n            label: titles[0],\r\n            data:jsonToData(dataPoints1),\r\n            borderColor:'blue',\r\n            \r\n            },\r\n          {\r\n            type:'line',\r\n            label:titles[1],\r\n            data:jsonToData(dataPoints2),\r\n            borderColor:'red'\r\n \r\n            },\r\n        ]\r\n      }\r\n  \r\n  //empty object to put both olddata and newdata\r\n     let updatedData:data ={\r\n      datasets:[]\r\n  };\r\n  //@ts-ignore\r\n  updatedData.datasets = oldData.datasets.concat(newData.datasets) \r\n  updateFunction(updatedData); //using the callback updatefunction when we finally obtain the data\r\n\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n  };\r\n  request();\r\n}\r\n\r\n\r\nfunction compareDtra(dataset:string,updateFunction:any,objective:string){\r\n  let urls = [\"\",\"\"];\r\n  let titles = [\"\",\"\"]\r\n  if(objective === 'Dtra'){\r\n     urls = [`${domain}${dataset}_gen5000_MOP1at5_Dtra.json`,\r\n              `${domain}${dataset}_gen5000_MOP7at5_Dtra.json`]\r\n     titles = [`${dataset} MOP1 Training Data`,`${dataset} MOP7 Training Data`];\r\n  }\r\n  else{\r\n    urls = [`${domain}${dataset}_gen5000_MOP1at5_Dtst.json`,\r\n              `${domain}${dataset}_gen5000_MOP7at5_Dtst.json`]\r\n    titles = [`${dataset} MOP1 Test Data`,`${dataset} MOP7 Test Data`]\r\n  }\r\n  const request  =  async()=>{\r\n    const response1 =  await fetch(urls[0])\r\n    const response2 =  await fetch(urls[1])\r\n    const dataPoints1 = await response1.json()\r\n    const dataPoints2 = await response2.json()\r\n    \r\n    try{\r\n      let newData = {\r\n        datasets:[\r\n          {\r\n            label: titles[0],\r\n            data:jsonToData(dataPoints1),\r\n            backgroundColor:'blue',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n          {\r\n            label:titles[1],\r\n            data:jsonToData(dataPoints2),\r\n            backgroundColor:'green',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n        ]\r\n      }\r\n  \r\n    updateFunction(newData); //using the callback updatefunction when we finally obtain the data\r\n\r\n\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n  };\r\n  request();\r\n}\r\n\r\n//preset to showcase somedata constantly TODO: Obtain a lot of data async \r\nexport function preset(dataset:string,updateFunction:any){\r\n  let urls = [`${domain}${dataset}_gen5000_MOP1at5_Dtra.json`,\r\n              `${domain}${dataset}_gen5000_MOP1at5_Dtst.json`]\r\n  \r\n  const request  =  async()=>{\r\n    const response1 =  await fetch(urls[0])\r\n    const response2 =  await fetch(urls[1])\r\n    const dataPoints1 = await response1.json()\r\n    const dataPoints2 = await response2.json()\r\n    \r\n    try{\r\n      let newData = {\r\n        datasets:[\r\n          {\r\n            label:`${dataset}Training Data MOP1`,\r\n            data:jsonToData(dataPoints1),\r\n            backgroundColor:'blue',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n          {\r\n            label:`${dataset} Test Data MOP1`,\r\n            data:jsonToData(dataPoints2),\r\n            backgroundColor:'red',\r\n            radius:10,\r\n            hoverRadius:10,\r\n            borderColor:'black',\r\n            borderWidth:2,\r\n            },\r\n        ]\r\n      }\r\n  \r\n    updateFunction(newData); //using the callback updatefunction when we finally obtain the data\r\n\r\n\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n  };\r\n  request();\r\n\r\n}\r\n//update function is the useState hook that is passed down from App.tsx and is used as a callback function\r\nfunction addNewData(oldData:data,datasetName:string,validationRate:string,mop:string,objective:string,color:string,updateFunction:any){\r\n    let subrate = 10-Math.round(parseFloat(validationRate)*10)\r\n    let jsonName:string = `${datasetName}_gen5000_${mop}at${subrate.toString(10)}_${objective}`\r\n    let url:string = `${domain}${jsonName}`\r\n   \r\n    //function of request\r\n    const request = async()=>{ //async function so that we can return the data after it's loaded\r\n      const response = await fetch(url) // response from server after fetching\r\n      const dataPoints = await response.json() // turning it into json data\r\n      try{\r\n        let newData ={\r\n          datasets:[\r\n          {\r\n              label:`${datasetName} ${objective} at ${validationRate} for ${mop}`,\r\n              data:jsonToData(dataPoints),\r\n              backgroundColor:color,\r\n              radius:10,\r\n              hoverRadius:10,\r\n              borderColor:'black',\r\n              borderWidth:2,\r\n              },\r\n          ]\r\n      }\r\n      //empty object to put both olddata and newdata\r\n      let updatedData:data ={\r\n          datasets:[]\r\n      };\r\n      \r\n      updatedData.datasets = oldData.datasets.concat(newData.datasets) \r\n      updateFunction(updatedData); //using the callback updatefunction when we finally obtain the data\r\n  \r\n      }catch(e){\r\n          console.log(e)\r\n          updateFunction(oldData);\r\n      }\r\n      \r\n    };\r\n    \r\n    request();\r\n  }\r\n\r\n// creates an empty data object and updates chartData with it\r\nexport function clearData(updateFunction:any){\r\n    let newData:data ={\r\n        datasets:[\r\n          \r\n        ]\r\n    };\r\n    updateFunction(newData);\r\n}\r\n\r\n\r\n\r\nexport default function ChartOptions({currentDataset,updateFunction,chartData}:ChartOptions) {\r\n    const [currentValid,setValid] = useState(validation_rates[0]);\r\n    const [currentMOP,setMOP] = useState(MOP[0]);\r\n    // const [currentCV,setCV] =useState(crossvalidation[0]);\r\n    const [currentObjective,setObjective] = useState(objectives[0]);\r\n    const [currentColor,setColor] = useState('white')\r\n    \r\n    // useEffect(()=>{\r\n    //   // Checking for changes in current dataset values\r\n    //   preset(currentDataset,updateFunction);\r\n    // } ,[currentDataset] \r\n    // );\r\n    return (\r\n    <div className=\"dropdowns\">\r\n      <Container>\r\n        <h2 id=\"currentDataset\">CurrentDataset</h2>\r\n        <DropdownOptions buttonName = {\"MOP\"} content={MOP} currentVal={currentMOP} updateFunction = {setMOP} />\r\n        {\r\n          currentMOP !=='MOP1' && <DropdownOptions buttonName = {\"Validation Rate\"} content={validation_rates} currentVal = {currentValid} updateFunction = {setValid} /> \r\n        }\r\n \r\n        <DropdownOptions buttonName = {\"Objective\"} content={currentMOP ==='MOP1'?mop1objectives:objectives} currentVal = {currentObjective} updateFunction = {setObjective} />\r\n\r\n        <DropdownOptions buttonName = {\"Color\"} content ={colors} currentVal = {currentColor} updateFunction = {setColor}></DropdownOptions>\r\n\r\n            \r\n        <Row>\r\n          <Button onClick={()=>addNewData(chartData,currentDataset,currentMOP === 'MOP1'?'0.5':currentValid,currentMOP,currentObjective,currentColor,updateFunction)} className=\"dropdown-button\" variant=\"primary\"> Add New</Button>   \r\n        </Row> \r\n\r\n        <Row>\r\n\r\n          <Col md={6} >\r\n          <Button onClick={()=>compareDtra(currentDataset,updateFunction,\"Dtra\")} className=\"dropdown-button\" variant=\"secondary\" >Display Training Data</Button>   \r\n          </Col>\r\n\r\n          <Col md={6}>\r\n          <Button onClick={()=>compareDtra(currentDataset,updateFunction,\"Dtst\")} className=\"dropdown-button\" variant=\"secondary\" >Display Test Data</Button>   \r\n          </Col>\r\n        </Row> \r\n        <Row>\r\n          <Button onClick={()=>compareToMop1(chartData,currentDataset,updateFunction)} className=\"dropdown-button\" variant=\"secondary\"> Compare to MOP1</Button>   \r\n        </Row>\r\n        <Row>\r\n          <Button onClick={()=>clearData(updateFunction)}className=\"dropdown-button\" variant=\"danger\">Clear All </Button>   \r\n        </Row>\r\n      </Container>\r\n            \r\n            \r\n    </div>\r\n        \r\n    )\r\n}\r\n","import React,{useEffect} from 'react'\r\nimport './DatasetsDisplay.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport { preset,clearData } from './ChartOptions';\r\nexport interface DatasetsDisplay{\r\n    datasets:string[];\r\n    updateCurrentDataset:any;\r\n    currentDataset:string;\r\n    updateChart:any;\r\n}\r\n\r\n\r\nfunction DatasetsDisplay({datasets,currentDataset,updateCurrentDataset,updateChart}:DatasetsDisplay) {\r\n    \r\n    useEffect(() => {\r\n        document.title = currentDataset;\r\n        if(document.getElementById(\"currentDataset\") !== null || document.getElementById(\"currentDataset\") !== undefined){\r\n            document.getElementById(\"currentDataset\")!.innerHTML = currentDataset;\r\n            console.log(\"UseEffect change title to:\")\r\n        }\r\n        console.log(currentDataset)\r\n        preset(currentDataset,updateChart)\r\n        return ()=>{\r\n            console.log(\"cleanup\");\r\n            clearData(updateChart);\r\n        };\r\n        \r\n    },[currentDataset])\r\n\r\n\r\n\r\n\r\n    function submit(e:React.MouseEvent<HTMLElement>){\r\n        e.preventDefault();\r\n        if(e.button === 0){\r\n            //@ts-ignore\r\n            updateCurrentDataset(e.currentTarget.value);\r\n            \r\n            console.log(\"Submit Function\")\r\n            \r\n        }\r\n        \r\n    }\r\n    // Defined inside the DatasetsDisplay() to access the local submit function\r\n    const datasetItems = datasets.map((dataset) => <Button   key = {dataset} onClick ={submit} variant=\"info\"  className=\"myButton\" value={dataset}> {dataset}</Button>);\r\n\r\n    return (\r\n        <div className=\"datasetsDisplay\">\r\n            {datasetItems}      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DatasetsDisplay\r\n","\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ScatterPlot from './components/ScatterPlot';\r\nimport DatasetsDisplay from './components/DatasetsDisplay';\r\nimport ChartOptions from './components/ChartOptions';\r\nimport {useState} from 'react';\r\nimport './App.css';\r\nimport { Container,Row,Col} from 'react-bootstrap';\r\nimport { useEffect } from 'react';\r\n\r\nconst datasetData:string[] =[\"australian\",\"iris\",\"magic\",\"newthyroid\",\"page-blocks\",\"penbased\",\"phoneme\",\"pima\",\"sonar\",\"vehicle\",\"wine\"];\r\n\r\n\r\nfunction App() {\r\n\r\n  const initialData = {\r\n    datasets: [],\r\n      \r\n  };\r\n\r\n  const [currentDataset,setDataset] = useState(datasetData[0])\r\n  const [chartData,setData] = useState(initialData)\r\n\r\n  useEffect(()=>{\r\n    console.log(\"rendering again\")\r\n  },[chartData])\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n      <Col xl=\"5\">\r\n      <h1 className=\"app\"> Charts for MoFGBML</h1>\r\n        <h3> Heroku changed their free offering so currently the nodejs backend is unreachable, I'll update soon.</h3>\r\n      </Col>\r\n      </Row>\r\n      <DatasetsDisplay datasets={datasetData} currentDataset ={currentDataset} updateCurrentDataset={setDataset} updateChart ={setData} />\r\n      <Container>\r\n       \r\n        <Row className=\"justify-content-center\">\r\n        <Col md={8}>\r\n          \r\n          <ScatterPlot \r\n          chartData={chartData} \r\n          />\r\n\r\n        </Col>\r\n        <Col md={4}>\r\n          <ChartOptions updateFunction={setData} chartData ={chartData} currentDataset={currentDataset} />\r\n        </Col>\r\n        </Row>\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}